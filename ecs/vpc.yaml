AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create a VPC with 2 public subnets. A public security group for HTTP. Also creates an application elastic load balancer.'

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.3.0/24'
    PrivateTwo:
      CIDR: '10.0.4.0/24'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  NAT:
    DependsOn: GatewayAttachement
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnetOne
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Public security group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  PublicSGInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Fn::GetAtt:
        - PublicSG
        - GroupId
      GroupId:
        Fn::GetAtt:
        - PublicSG
        - GroupId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:  {Ref: 'AWS::StackName'}
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
      - !Ref PublicSubnetOne
      - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicSG']
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: {Ref: 'AWS::StackName'}
      VpcId: !Ref 'VPC'
      TargetType: ip
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 60
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 3
      HealthCheckPath: /
      Matcher:
        HttpCode: '200'
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
         Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: {Ref: 'AWS::StackName'}

Outputs:
  VPCId:
    Description: The ID of the VPC 
    Value: !Ref 'VPC'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "VPCId" ]]
  PublicSubnetOneId:
    Description: The ID of Public Subnet One
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "PublicSubnetOneId" ]]
  PublicSubnetTwoId:
    Description: The ID of Public Subnet Two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "PublicSubnetTwoId" ]]
  PublicSG:
    Description: The ID of Public Security Group
    Value: !Ref 'PublicSG'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "PublicSG" ]]
  LoadBalancerId:
    Description: The DNS of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "LoadBalancerId" ]]
  TargetGroupId:
    Description: The ARN of the target group
    Value: !Ref 'TargetGroup'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "TargetGroupId" ]]
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "ClusterName" ]]

